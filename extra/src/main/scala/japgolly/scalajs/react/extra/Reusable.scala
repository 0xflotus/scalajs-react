package japgolly.scalajs.react.extra

import scalaz._
import japgolly.scalajs.react.vdom.Optional
import japgolly.scalajs.react.ReactComponentB

/**
 * Tests whether one instance can be used in place of another.
 * Used mostly to compare properties and state of a component to avoid unnecessary updates.
 *
 * If you imagine a class with 8 fields, equality would compare all 8 fields where as this would typically just compare
 * the ID field, the update-date, or the revision number.
 * You might think of this as a very quick version of equality.
 *
 * Don't miss `Reusable.shouldComponentUpdate` which can be applied to a component via `ReactComponentB.configure`.
 *
 * @since 0.9.0
 */
final class Reusable[A](val test: (A, A) => Boolean) extends AnyVal {
  def contramap[B](f: B => A): Reusable[B] =
    new Reusable((x, y) => test(f(x), f(y)))

  def narrow[B <: A]: Reusable[B] =
    new Reusable[B](test)

  def testNot: (A, A) => Boolean =
    !test(_, _)
}

object Reusable {
  @inline def apply[A](implicit r: Reusable[A]): Reusable[A] = r

  def fn[A](f: (A, A) => Boolean): Reusable[A] =
    new Reusable(f)

  def const[A](r: Boolean): Reusable[A] =
    new Reusable((_, _) => r)

  /** Compare by reference. Reuse if both values are the same instance. */
  def byRef[A <: AnyRef]: Reusable[A] =
    new Reusable((a, b) => a eq b)

  /** Compare using universal equality (Scala's == operator). */
  def by_==[A]: Reusable[A] =
    new Reusable((a, b) => a == b)

  /** Compare using Scalaz equality typeclass. */
  def byEqual[A](implicit e: Equal[A]): Reusable[A] =
    new Reusable(e.equal)

  def by[A, B](f: A => B)(implicit r: Reusable[B]): Reusable[A] =
    r contramap f

  // -------------------------------------------------------------------------------------------------------------------
  // Instances

  @inline implicit def reusableUnit   : Reusable[Unit   ] = const(true)
  @inline implicit def reusableBoolean: Reusable[Boolean] = by_==
  @inline implicit def reusableByte   : Reusable[Byte   ] = by_==
  @inline implicit def reusableChar   : Reusable[Char   ] = by_==
  @inline implicit def reusableShort  : Reusable[Short  ] = by_==
  @inline implicit def reusableInt    : Reusable[Int    ] = by_==
  @inline implicit def reusableLong   : Reusable[Long   ] = by_==
  @inline implicit def reusableString : Reusable[String ] = by_==
//@inline implicit def reusableFloat  : Reusable[Float  ] = by_==
//@inline implicit def reusableDouble : Reusable[Double ] = by_==

  implicit def optional[O[_], A](implicit o: Optional[O], r: Reusable[A]): Reusable[O[A]] =
    fn((x, y) =>
      o.fold(x, o isEmpty y)(xa =>
        o.fold(y, false)(ya =>
          xa ~=~ ya)))

  implicit def either[A: Reusable, B: Reusable]: Reusable[Either[A, B]] = fn {
    case (Left(a),  Left(b))  => a ~=~ b
    case (Right(a), Right(b)) => a ~=~ b
    case _ => false
  }

  implicit def disjunction[A: Reusable, B: Reusable]: Reusable[A \/ B] = fn {
    case (-\/(a), -\/(b)) => a ~=~ b
    case (\/-(a), \/-(b)) => a ~=~ b
    case _ => false
  }

  implicit def these[A: Reusable, B: Reusable]: Reusable[A \&/ B] = {
    import \&/._
    fn {
      case (Both(a, b), Both(c, d)) => (a ~=~ c) && (b ~=~ d)
      case (This(a),    This(b))    => a ~=~ b
      case (That(a),    That(b))    => a ~=~ b
      case _ => false
    }
  }

  // Generated by bin/gen-reusable

  implicit def tuple2[A:Reusable, B:Reusable]: Reusable[(A,B)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2))

  implicit def tuple3[A:Reusable, B:Reusable, C:Reusable]: Reusable[(A,B,C)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2) && (x._3 ~=~ y._3))

  implicit def tuple4[A:Reusable, B:Reusable, C:Reusable, D:Reusable]: Reusable[(A,B,C,D)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2) && (x._3 ~=~ y._3) && (x._4 ~=~ y._4))

  implicit def tuple5[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable]: Reusable[(A,B,C,D,E)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2) && (x._3 ~=~ y._3) && (x._4 ~=~ y._4) && (x._5 ~=~ y._5))

  implicit def tuple6[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable]: Reusable[(A,B,C,D,E,F)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2) && (x._3 ~=~ y._3) && (x._4 ~=~ y._4) && (x._5 ~=~ y._5) && (x._6 ~=~ y._6))

  implicit def tuple7[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable]: Reusable[(A,B,C,D,E,F,G)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2) && (x._3 ~=~ y._3) && (x._4 ~=~ y._4) && (x._5 ~=~ y._5) && (x._6 ~=~ y._6) && (x._7 ~=~ y._7))

  implicit def tuple8[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable]: Reusable[(A,B,C,D,E,F,G,H)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2) && (x._3 ~=~ y._3) && (x._4 ~=~ y._4) && (x._5 ~=~ y._5) && (x._6 ~=~ y._6) && (x._7 ~=~ y._7) && (x._8 ~=~ y._8))

  implicit def tuple9[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable]: Reusable[(A,B,C,D,E,F,G,H,I)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2) && (x._3 ~=~ y._3) && (x._4 ~=~ y._4) && (x._5 ~=~ y._5) && (x._6 ~=~ y._6) && (x._7 ~=~ y._7) && (x._8 ~=~ y._8) && (x._9 ~=~ y._9))

  implicit def tuple10[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable]: Reusable[(A,B,C,D,E,F,G,H,I,J)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2) && (x._3 ~=~ y._3) && (x._4 ~=~ y._4) && (x._5 ~=~ y._5) && (x._6 ~=~ y._6) && (x._7 ~=~ y._7) && (x._8 ~=~ y._8) && (x._9 ~=~ y._9) && (x._10 ~=~ y._10))

  implicit def tuple11[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable]: Reusable[(A,B,C,D,E,F,G,H,I,J,K)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2) && (x._3 ~=~ y._3) && (x._4 ~=~ y._4) && (x._5 ~=~ y._5) && (x._6 ~=~ y._6) && (x._7 ~=~ y._7) && (x._8 ~=~ y._8) && (x._9 ~=~ y._9) && (x._10 ~=~ y._10) && (x._11 ~=~ y._11))

  implicit def tuple12[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable]: Reusable[(A,B,C,D,E,F,G,H,I,J,K,L)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2) && (x._3 ~=~ y._3) && (x._4 ~=~ y._4) && (x._5 ~=~ y._5) && (x._6 ~=~ y._6) && (x._7 ~=~ y._7) && (x._8 ~=~ y._8) && (x._9 ~=~ y._9) && (x._10 ~=~ y._10) && (x._11 ~=~ y._11) && (x._12 ~=~ y._12))

  implicit def tuple13[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, M:Reusable]: Reusable[(A,B,C,D,E,F,G,H,I,J,K,L,M)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2) && (x._3 ~=~ y._3) && (x._4 ~=~ y._4) && (x._5 ~=~ y._5) && (x._6 ~=~ y._6) && (x._7 ~=~ y._7) && (x._8 ~=~ y._8) && (x._9 ~=~ y._9) && (x._10 ~=~ y._10) && (x._11 ~=~ y._11) && (x._12 ~=~ y._12) && (x._13 ~=~ y._13))

  implicit def tuple14[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, M:Reusable, N:Reusable]: Reusable[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2) && (x._3 ~=~ y._3) && (x._4 ~=~ y._4) && (x._5 ~=~ y._5) && (x._6 ~=~ y._6) && (x._7 ~=~ y._7) && (x._8 ~=~ y._8) && (x._9 ~=~ y._9) && (x._10 ~=~ y._10) && (x._11 ~=~ y._11) && (x._12 ~=~ y._12) && (x._13 ~=~ y._13) && (x._14 ~=~ y._14))

  implicit def tuple15[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, M:Reusable, N:Reusable, O:Reusable]: Reusable[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2) && (x._3 ~=~ y._3) && (x._4 ~=~ y._4) && (x._5 ~=~ y._5) && (x._6 ~=~ y._6) && (x._7 ~=~ y._7) && (x._8 ~=~ y._8) && (x._9 ~=~ y._9) && (x._10 ~=~ y._10) && (x._11 ~=~ y._11) && (x._12 ~=~ y._12) && (x._13 ~=~ y._13) && (x._14 ~=~ y._14) && (x._15 ~=~ y._15))

  implicit def tuple16[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, M:Reusable, N:Reusable, O:Reusable, P:Reusable]: Reusable[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2) && (x._3 ~=~ y._3) && (x._4 ~=~ y._4) && (x._5 ~=~ y._5) && (x._6 ~=~ y._6) && (x._7 ~=~ y._7) && (x._8 ~=~ y._8) && (x._9 ~=~ y._9) && (x._10 ~=~ y._10) && (x._11 ~=~ y._11) && (x._12 ~=~ y._12) && (x._13 ~=~ y._13) && (x._14 ~=~ y._14) && (x._15 ~=~ y._15) && (x._16 ~=~ y._16))

  implicit def tuple17[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, M:Reusable, N:Reusable, O:Reusable, P:Reusable, Q:Reusable]: Reusable[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2) && (x._3 ~=~ y._3) && (x._4 ~=~ y._4) && (x._5 ~=~ y._5) && (x._6 ~=~ y._6) && (x._7 ~=~ y._7) && (x._8 ~=~ y._8) && (x._9 ~=~ y._9) && (x._10 ~=~ y._10) && (x._11 ~=~ y._11) && (x._12 ~=~ y._12) && (x._13 ~=~ y._13) && (x._14 ~=~ y._14) && (x._15 ~=~ y._15) && (x._16 ~=~ y._16) && (x._17 ~=~ y._17))

  implicit def tuple18[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, M:Reusable, N:Reusable, O:Reusable, P:Reusable, Q:Reusable, R:Reusable]: Reusable[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2) && (x._3 ~=~ y._3) && (x._4 ~=~ y._4) && (x._5 ~=~ y._5) && (x._6 ~=~ y._6) && (x._7 ~=~ y._7) && (x._8 ~=~ y._8) && (x._9 ~=~ y._9) && (x._10 ~=~ y._10) && (x._11 ~=~ y._11) && (x._12 ~=~ y._12) && (x._13 ~=~ y._13) && (x._14 ~=~ y._14) && (x._15 ~=~ y._15) && (x._16 ~=~ y._16) && (x._17 ~=~ y._17) && (x._18 ~=~ y._18))

  implicit def tuple19[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, M:Reusable, N:Reusable, O:Reusable, P:Reusable, Q:Reusable, R:Reusable, S:Reusable]: Reusable[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2) && (x._3 ~=~ y._3) && (x._4 ~=~ y._4) && (x._5 ~=~ y._5) && (x._6 ~=~ y._6) && (x._7 ~=~ y._7) && (x._8 ~=~ y._8) && (x._9 ~=~ y._9) && (x._10 ~=~ y._10) && (x._11 ~=~ y._11) && (x._12 ~=~ y._12) && (x._13 ~=~ y._13) && (x._14 ~=~ y._14) && (x._15 ~=~ y._15) && (x._16 ~=~ y._16) && (x._17 ~=~ y._17) && (x._18 ~=~ y._18) && (x._19 ~=~ y._19))

  implicit def tuple20[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, M:Reusable, N:Reusable, O:Reusable, P:Reusable, Q:Reusable, R:Reusable, S:Reusable, T:Reusable]: Reusable[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2) && (x._3 ~=~ y._3) && (x._4 ~=~ y._4) && (x._5 ~=~ y._5) && (x._6 ~=~ y._6) && (x._7 ~=~ y._7) && (x._8 ~=~ y._8) && (x._9 ~=~ y._9) && (x._10 ~=~ y._10) && (x._11 ~=~ y._11) && (x._12 ~=~ y._12) && (x._13 ~=~ y._13) && (x._14 ~=~ y._14) && (x._15 ~=~ y._15) && (x._16 ~=~ y._16) && (x._17 ~=~ y._17) && (x._18 ~=~ y._18) && (x._19 ~=~ y._19) && (x._20 ~=~ y._20))

  implicit def tuple21[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, M:Reusable, N:Reusable, O:Reusable, P:Reusable, Q:Reusable, R:Reusable, S:Reusable, T:Reusable, U:Reusable]: Reusable[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2) && (x._3 ~=~ y._3) && (x._4 ~=~ y._4) && (x._5 ~=~ y._5) && (x._6 ~=~ y._6) && (x._7 ~=~ y._7) && (x._8 ~=~ y._8) && (x._9 ~=~ y._9) && (x._10 ~=~ y._10) && (x._11 ~=~ y._11) && (x._12 ~=~ y._12) && (x._13 ~=~ y._13) && (x._14 ~=~ y._14) && (x._15 ~=~ y._15) && (x._16 ~=~ y._16) && (x._17 ~=~ y._17) && (x._18 ~=~ y._18) && (x._19 ~=~ y._19) && (x._20 ~=~ y._20) && (x._21 ~=~ y._21))

  implicit def tuple22[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, M:Reusable, N:Reusable, O:Reusable, P:Reusable, Q:Reusable, R:Reusable, S:Reusable, T:Reusable, U:Reusable, V:Reusable]: Reusable[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)] =
    fn((x,y) ⇒ (x._1 ~=~ y._1) && (x._2 ~=~ y._2) && (x._3 ~=~ y._3) && (x._4 ~=~ y._4) && (x._5 ~=~ y._5) && (x._6 ~=~ y._6) && (x._7 ~=~ y._7) && (x._8 ~=~ y._8) && (x._9 ~=~ y._9) && (x._10 ~=~ y._10) && (x._11 ~=~ y._11) && (x._12 ~=~ y._12) && (x._13 ~=~ y._13) && (x._14 ~=~ y._14) && (x._15 ~=~ y._15) && (x._16 ~=~ y._16) && (x._17 ~=~ y._17) && (x._18 ~=~ y._18) && (x._19 ~=~ y._19) && (x._20 ~=~ y._20) && (x._21 ~=~ y._21) && (x._22 ~=~ y._22))

  def caseclass2[A:Reusable, B:Reusable, Z](z: Z ⇒ Option[(A,B)]): Reusable[Z] =
    Reusable[(A,B)].contramap(z(_).get)

  def caseclass3[A:Reusable, B:Reusable, C:Reusable, Z](z: Z ⇒ Option[(A,B,C)]): Reusable[Z] =
    Reusable[(A,B,C)].contramap(z(_).get)

  def caseclass4[A:Reusable, B:Reusable, C:Reusable, D:Reusable, Z](z: Z ⇒ Option[(A,B,C,D)]): Reusable[Z] =
    Reusable[(A,B,C,D)].contramap(z(_).get)

  def caseclass5[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, Z](z: Z ⇒ Option[(A,B,C,D,E)]): Reusable[Z] =
    Reusable[(A,B,C,D,E)].contramap(z(_).get)

  def caseclass6[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, Z](z: Z ⇒ Option[(A,B,C,D,E,F)]): Reusable[Z] =
    Reusable[(A,B,C,D,E,F)].contramap(z(_).get)

  def caseclass7[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, Z](z: Z ⇒ Option[(A,B,C,D,E,F,G)]): Reusable[Z] =
    Reusable[(A,B,C,D,E,F,G)].contramap(z(_).get)

  def caseclass8[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, Z](z: Z ⇒ Option[(A,B,C,D,E,F,G,H)]): Reusable[Z] =
    Reusable[(A,B,C,D,E,F,G,H)].contramap(z(_).get)

  def caseclass9[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, Z](z: Z ⇒ Option[(A,B,C,D,E,F,G,H,I)]): Reusable[Z] =
    Reusable[(A,B,C,D,E,F,G,H,I)].contramap(z(_).get)

  def caseclass10[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, Z](z: Z ⇒ Option[(A,B,C,D,E,F,G,H,I,J)]): Reusable[Z] =
    Reusable[(A,B,C,D,E,F,G,H,I,J)].contramap(z(_).get)

  def caseclass11[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, Z](z: Z ⇒ Option[(A,B,C,D,E,F,G,H,I,J,K)]): Reusable[Z] =
    Reusable[(A,B,C,D,E,F,G,H,I,J,K)].contramap(z(_).get)

  def caseclass12[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, Z](z: Z ⇒ Option[(A,B,C,D,E,F,G,H,I,J,K,L)]): Reusable[Z] =
    Reusable[(A,B,C,D,E,F,G,H,I,J,K,L)].contramap(z(_).get)

  def caseclass13[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, M:Reusable, Z](z: Z ⇒ Option[(A,B,C,D,E,F,G,H,I,J,K,L,M)]): Reusable[Z] =
    Reusable[(A,B,C,D,E,F,G,H,I,J,K,L,M)].contramap(z(_).get)

  def caseclass14[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, M:Reusable, N:Reusable, Z](z: Z ⇒ Option[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]): Reusable[Z] =
    Reusable[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)].contramap(z(_).get)

  def caseclass15[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, M:Reusable, N:Reusable, O:Reusable, Z](z: Z ⇒ Option[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]): Reusable[Z] =
    Reusable[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)].contramap(z(_).get)

  def caseclass16[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, M:Reusable, N:Reusable, O:Reusable, P:Reusable, Z](z: Z ⇒ Option[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]): Reusable[Z] =
    Reusable[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)].contramap(z(_).get)

  def caseclass17[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, M:Reusable, N:Reusable, O:Reusable, P:Reusable, Q:Reusable, Z](z: Z ⇒ Option[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]): Reusable[Z] =
    Reusable[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)].contramap(z(_).get)

  def caseclass18[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, M:Reusable, N:Reusable, O:Reusable, P:Reusable, Q:Reusable, R:Reusable, Z](z: Z ⇒ Option[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]): Reusable[Z] =
    Reusable[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)].contramap(z(_).get)

  def caseclass19[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, M:Reusable, N:Reusable, O:Reusable, P:Reusable, Q:Reusable, R:Reusable, S:Reusable, Z](z: Z ⇒ Option[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]): Reusable[Z] =
    Reusable[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)].contramap(z(_).get)

  def caseclass20[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, M:Reusable, N:Reusable, O:Reusable, P:Reusable, Q:Reusable, R:Reusable, S:Reusable, T:Reusable, Z](z: Z ⇒ Option[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]): Reusable[Z] =
    Reusable[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)].contramap(z(_).get)

  def caseclass21[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, M:Reusable, N:Reusable, O:Reusable, P:Reusable, Q:Reusable, R:Reusable, S:Reusable, T:Reusable, U:Reusable, Z](z: Z ⇒ Option[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]): Reusable[Z] =
    Reusable[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)].contramap(z(_).get)

  def caseclass22[A:Reusable, B:Reusable, C:Reusable, D:Reusable, E:Reusable, F:Reusable, G:Reusable, H:Reusable, I:Reusable, J:Reusable, K:Reusable, L:Reusable, M:Reusable, N:Reusable, O:Reusable, P:Reusable, Q:Reusable, R:Reusable, S:Reusable, T:Reusable, U:Reusable, V:Reusable, Z](z: Z ⇒ Option[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]): Reusable[Z] =
    Reusable[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)].contramap(z(_).get)

  // -------------------------------------------------------------------------------------------------------------------

  def shouldComponentUpdate[P: Reusable, S: Reusable, B] =
    (_: ReactComponentB[P, S, B]).shouldComponentUpdate(($, p, s) =>
      ($.props ~/~ p) || ($.state ~/~ s))

  def shouldComponentUpdateDebug[P: Reusable, S: Reusable, B](f: (P, P, Boolean, S, S, Boolean) => Unit) =
    (_: ReactComponentB[P, S, B]).shouldComponentUpdate(($, p, s) => {
      val up = $.props ~/~ p
      val us = $.state ~/~ s
      f($.props, p, up, $.state, s, us)
      up || us
    })

  def shouldComponentUpdateDebugLog[P: Reusable, S: Reusable, B](name: String) =
    shouldComponentUpdateDebug[P, S, B] { (p1, p2, p, s1, s2, s) =>
      println(s"$name.shouldComponentUpdate = ${p || s}\n  Props: $p. [$p1] ⇒ [$p2]\n  State: $s. [$s1] ⇒ [$s2]")
    }
}
